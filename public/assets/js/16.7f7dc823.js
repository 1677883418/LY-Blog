(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{579:function(t,a,v){"use strict";v.r(a);var _=v(5),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"大数据体系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#大数据体系"}},[t._v("#")]),t._v(" 大数据体系")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/07/24/JcxTGydQn8DqWFK.png",alt:""}})]),t._v(" "),v("h3",{attrs:{id:"sql查询优化器重要性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#sql查询优化器重要性"}},[t._v("#")]),t._v(" SQL查询优化器重要性")]),t._v(" "),v("h4",{attrs:{id:"sql重要性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#sql重要性"}},[t._v("#")]),t._v(" SQL重要性")]),t._v(" "),v("ul",[v("li",[t._v("有 MySQL、Oracle 之类使用 SQL 作为交互语言的数据库")]),t._v(" "),v("li",[t._v("有 JDBC、ODBC 之类和各种数据库交互的标准接口")]),t._v(" "),v("li",[t._v("有大量数据科学家和数据分析师等不太会编程语言但又要使用数据的人")]),t._v(" "),v("li",[t._v("多个大数据计算引擎都支持 SQL 作为更高抽象层次的计算入口\n"),v("ul",[v("li",[t._v("MapReduce -> Hive SQL")]),t._v(" "),v("li",[t._v("Spark -> Spark SQL")]),t._v(" "),v("li",[t._v("[[Flink]] -> Flink SQL")])])])]),t._v(" "),v("h4",{attrs:{id:"sql查询优化意义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#sql查询优化意义"}},[t._v("#")]),t._v(" SQL查询优化意义")]),t._v(" "),v("ul",[v("li",[t._v("SQL是一种声明式语言，用户只描述做什么，没有告诉数据库怎么做")]),t._v(" "),v("li",[t._v("目标：找到一个正确且执行代价最小的物理执行计划")]),t._v(" "),v("li",[t._v("查询优化器是数据库的大脑，最复杂的模块，很多相关问题都是NP的")]),t._v(" "),v("li",[t._v("一般SQL越复杂，Join的表越多，数据量越大，查询优化的意义就越大因为不同执行方式的性能差别可能有成百上干倍("),v("strong",[t._v("不同算法时空复杂度差距很大")]),t._v(")\n"),v("em",[v("strong",[t._v("综上所述,SQL查询优化器是SQL的入口,SQL又是大数据的基础，因此应该首先学习SQL Optimizer")])])])]),t._v(" "),v("h3",{attrs:{id:"sql处理流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#sql处理流程"}},[t._v("#")]),t._v(" SQL处理流程")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/07/24/OQwK9ogx8XkDr2W.png",alt:""}})]),t._v(" "),v("h4",{attrs:{id:"parser"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#parser"}},[t._v("#")]),t._v(" Parser")]),t._v(" "),v("ul",[v("li",[t._v("String --\x3e AST(abstract syntax tree)\n"),v("ul",[v("li",[t._v("词法分析:拆分字符串，得到关键词、数值常量、字符串常量、运算符号等token")]),t._v(" "),v("li",[t._v("语法分析：将token组成AST node,最终得到一个AST")])])]),t._v(" "),v("li",[t._v("和编译原理课程里的“前端”知识相关")]),t._v(" "),v("li",[t._v("实现:递归下降(ClickHouse),Flex和Bison(PostgreSQl),JavaCC([[Flink]]),Antlr(Presto,Spark)\n"),v("img",{attrs:{src:"https://s2.loli.net/2022/07/24/HQv5OgPfZLM2skd.png",alt:""}})])]),t._v(" "),v("h4",{attrs:{id:"ast构成"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ast构成"}},[t._v("#")]),t._v(" AST构成")]),t._v(" "),v("ul",[v("li",[t._v("SelectStmt:根节点,拆分成不同的子节点\n"),v("ul",[v("li",[t._v("SelectList:包含要选择的列的信息")]),t._v(" "),v("li",[t._v("FromClause:包含选择的表和数据库的信息")]),t._v(" "),v("li",[t._v("WhereClause:Where信息过滤条件\n"),v("ul",[v("li",[t._v("BetweenPredicate:查询条件包含"),v("code",[t._v("Between")]),t._v("时执行操作")]),t._v(" "),v("li",[t._v("Inpredicate:查询条件包含"),v("code",[t._v("In")]),t._v("时执行操作")]),t._v(" "),v("li",[t._v("LikePredicate:查询条件包含"),v("code",[t._v("Like")]),t._v("时执行操作")])])]),t._v(" "),v("li",[t._v("GroupClause:基于那些列要做聚合的操作")]),t._v(" "),v("li",[t._v("OrderClause:包含"),v("code",[t._v("Order")]),t._v("子句时排序的规则")])])])]),t._v(" "),v("h4",{attrs:{id:"analyzer"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#analyzer"}},[t._v("#")]),t._v(" Analyzer")]),t._v(" "),v("ul",[v("li",[t._v("***检查并绑定***Database,Table,Column等元信息")]),t._v(" "),v("li",[v("em",[v("strong",[t._v("SQL的合法性检查")])]),t._v(" (如min/max/avg的输入是否是数值,数据库，表和列名是否存在，列的数据类型是否正确)")]),t._v(" "),v("li",[t._v("将 AST 转换成逻辑计划树（在某些系统中这个工作由一个 Converter 完成）\n执行流程:AST(抽象语法树) --\x3e Analyzer --\x3e Logical Plan逻辑执行计划")])]),t._v(" "),v("h4",{attrs:{id:"logical-plan"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#logical-plan"}},[t._v("#")]),t._v(" Logical Plan")]),t._v(" "),v("ul",[v("li",[t._v("理解:"),v("strong",[t._v("逻辑地")]),t._v("描述一个 SQL 如何一步步地执行查询和计算，最终得到执行结果的一个"),v("em",[v("strong",[t._v("分步骤地计划***。树中每个节点是是一个算子，定义了对数据集合的计算操作（过滤，排序，聚合，连接），边代表了数据的流向，从孩子节点流向父节点。之所以称它为逻辑的，是因为算子定义的是逻辑的计算操作，没有指定实际的算法，比如对于逻辑的排序算子，逻辑计划树里")]),t._v("没有指定")]),t._v("*使用快排还是堆排。")]),t._v(" "),v("li",[t._v("数据结构:左深树")]),t._v(" "),v("li",[t._v("逻辑地描述SQL对应的分步骤计算操作")]),t._v(" "),v("li",[t._v("计算操作:算子(operator)\n"),v("img",{attrs:{src:"https://s2.loli.net/2022/07/24/ztuxYQh9WO5iF7s.png",alt:""}})])]),t._v(" "),v("h4",{attrs:{id:"physical-plan-物理执行计划"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#physical-plan-物理执行计划"}},[t._v("#")]),t._v(" Physical Plan(物理执行计划)")]),t._v(" "),v("ul",[v("li",[t._v("优化器的输出是一个分布式的物理执行计划。")]),t._v(" "),v("li",[t._v("分布式物理执行计划的目标是在单机 Plan 的基础上最小化数据移动和最大化本地 Scan，生成 PlanFragment 树。")]),t._v(" "),v("li",[t._v("一个 PlanFragment 封装了在一台机器上对数据集的操作逻辑。每个 PlanFragment 可以在每个 executor 节点生成 1 个或多个执行实例，不同执行实例处理不同的数据集，通过并发来提升查询性能。")]),t._v(" "),v("li",[t._v("Plan 分布式化的方法是增加 shuffle 算子，执行计划树会以 shuffle 算子为边界拆分为PlanFragment。\n"),v("img",{attrs:{src:"https://s2.loli.net/2022/07/24/91BzOWbH2TojQLg.png",alt:""}})]),t._v(" "),v("li",[t._v("Plan Fragment:执行计划子树\n"),v("ul",[v("li",[t._v("目标：最小化网络数据传输")]),t._v(" "),v("li",[t._v("利用上数据的物理分布(数据亲和性)")]),t._v(" "),v("li",[t._v("增加Shuffle算子")])])])]),t._v(" "),v("h4",{attrs:{id:"executor"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#executor"}},[t._v("#")]),t._v(" Executor")]),t._v(" "),v("ul",[v("li",[t._v("单机并行:cache,pipeline,SIMD")]),t._v(" "),v("li",[t._v("多机并行:一个fragment对应多个实例")])]),t._v(" "),v("h3",{attrs:{id:"小结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),v("ul",[v("li",[t._v("One SQL rules big data all\n结果")]),t._v(" "),v("li",[t._v("SQL需要依次经过Parser,Analyzer,Optimizer和Executor的处理")]),t._v(" "),v("li",[t._v("查询优化器是数据库的大脑，在大数据场景下对查询性能至关重要")]),t._v(" "),v("li",[t._v("查询优化器需要感知数据分布，充分利用数据的亲和性")]),t._v(" "),v("li",[t._v("查询优化器按照最小化网络数据传输的目标把逻辑计划拆分成多个物理计划片段")])]),t._v(" "),v("h2",{attrs:{id:"常见的查询优化器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见的查询优化器"}},[t._v("#")]),t._v(" 常见的查询优化器")]),t._v(" "),v("h3",{attrs:{id:"查询优化器分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查询优化器分类"}},[t._v("#")]),t._v(" 查询优化器分类")]),t._v(" "),v("ul",[v("li",[t._v("按照遍历树的顺序\n"),v("ul",[v("li",[t._v("Top-down Optimizer\n"),v("ul",[v("li",[t._v("从目标输出开始，由上往下遍历计划树，找到完整的最优执行计划")]),t._v(" "),v("li",[t._v("Volcano/Cascade,SQLServer")])])]),t._v(" "),v("li",[t._v("Bottom-up Optimizer\n"),v("ul",[v("li",[t._v("从零开始，由下往上遍历计划树，找到完整的执行计划")]),t._v(" "),v("li",[t._v("例子:System R,PostgreSQL,IBM DB2")])])])])]),t._v(" "),v("li",[t._v("按照优化的方法\n"),v("ul",[v("li",[t._v("RBO(Rule-based Optimizer)\n"),v("ul",[v("li",[t._v("根据关系代数等价语义,重写查询")]),t._v(" "),v("li",[t._v("基于启发式规则")]),t._v(" "),v("li",[t._v("会访问表的元信息(catalog),不会涉及具体的表数据(data)")])])]),t._v(" "),v("li",[t._v("CBO(Cost-based Optimizer)\n"),v("ul",[v("li",[t._v("使用一个模型估算执行计划的代价,选择而代价最小的执行计划")])])])])])]),t._v(" "),v("h3",{attrs:{id:"rbo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rbo"}},[t._v("#")]),t._v(" RBO")]),t._v(" "),v("h4",{attrs:{id:"概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/07/24/B9fYPJShw6KW3kx.webp",alt:""}})]),t._v(" "),v("ul",[v("li",[t._v("基于关系代数等价规则对逻辑计划进行变换")]),t._v(" "),v("li",[t._v("实现上:\n"),v("ul",[v("li",[t._v("Pattern：定义了特定结构的 Operator 子树（结构）")]),t._v(" "),v("li",[t._v("Rule：定义了如何将其匹配的节点替换（Substitute)为新形态，从而生成新的、等价的Operator 树（"),v("strong",[t._v("原地替换")]),t._v("）")]),t._v(" "),v("li",[t._v("优化器搜索过程被抽象为不断匹配 Pattern 然后应用 Rule 转换，直到没有可以匹配的 rule")])])]),t._v(" "),v("li",[t._v("局限性:\n"),v("ul",[v("li",[t._v("无法解决多表连接问题")]),t._v(" "),v("li",[t._v("无法确定和选择最优的分布式 Join/Aggregate 执行方式")])])])]),t._v(" "),v("h4",{attrs:{id:"关系代数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关系代数"}},[t._v("#")]),t._v(" 关系代数")]),t._v(" "),v("ul",[v("li",[t._v("运算符\n"),v("ul",[v("li",[t._v("Select(σ):选择")]),t._v(" "),v("li",[t._v("project(Π):投影")]),t._v(" "),v("li",[t._v("union(∪):并")]),t._v(" "),v("li",[t._v("join(⋈):自然连接")]),t._v(" "),v("li",[t._v("...")])])]),t._v(" "),v("li",[t._v("等价变换:结合律、交换律、传递性\n"),v("img",{attrs:{src:"https://s2.loli.net/2022/07/24/dPosXJ6c5hryfj3.png",alt:""}})])]),t._v(" "),v("h4",{attrs:{id:"优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[t._v("#")]),t._v(" 优化")]),t._v(" "),v("p",[t._v("例子:")]),t._v(" "),v("div",{staticClass:"language-SQL line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-sql"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" pv"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("siteld"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" pv "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" pv"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("siteld "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("siteld "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" pv"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userld "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("siteld "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br")])]),v("h5",{attrs:{id:"优化原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优化原则"}},[t._v("#")]),t._v(" 优化原则")]),t._v(" "),v("ul",[v("li",[t._v("Read data less and faster(I/O)")]),t._v(" "),v("li",[t._v("Transfer data less and faster (Network)")]),t._v(" "),v("li",[t._v("Process data less and faster(CPU Memory)")])]),t._v(" "),v("h5",{attrs:{id:"列裁剪"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#列裁剪"}},[t._v("#")]),t._v(" 列裁剪")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/07/24/VML8KcWbplrtASa.png",alt:""}})]),t._v(" "),v("ul",[v("li",[t._v("Project:算子计算出需要哪些列，将列信息传递给FILTER")]),t._v(" "),v("li",[t._v("FILTER:自身有需要的列，加上Project传递的列构成了新的集合")]),t._v(" "),v("li",[t._v("JOIN:合并列形成新集合")]),t._v(" "),v("li",[t._v("SCAN:所有算子的列的集合")])]),t._v(" "),v("h5",{attrs:{id:"谓词下推"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#谓词下推"}},[t._v("#")]),t._v(" 谓词下推")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/07/24/M7rKFobdLJ564tg.png",alt:""}})]),t._v(" "),v("ul",[v("li",[t._v("谓词:用来描述或判定客体性质、特征或者客体之间关系的词项."),v("strong",[t._v("在SQL中，谓词就是返回boolean值即true和false的函数，或是隐式转换为bool的函数。")]),t._v(" "),v("ul",[v("li",[t._v("关键字:LKIE、BETWEEN、IS NULL、IS NOT NULL、IN、EXISTS")])])]),t._v(" "),v("li",[t._v("基本思想:"),v("strong",[t._v("将过滤表达式尽可能移动至靠近数据源的位置，以使真正执行时能直接跳过无关的数据。")])]),t._v(" "),v("li",[t._v("目的:通过将一些过滤条件尽可能的在最底层执行可以减少每一层交互的数据量，从而提升性能。")])]),t._v(" "),v("h5",{attrs:{id:"传递闭包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#传递闭包"}},[t._v("#")]),t._v(" 传递闭包")]),t._v(" "),v("ul",[v("li",[t._v("理解:根据表达式的等价关系和一些过滤条件 --\x3e 推导出一些新的过滤条件")])]),t._v(" "),v("h5",{attrs:{id:"runtime-filter-运行时拦截"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#runtime-filter-运行时拦截"}},[t._v("#")]),t._v(" Runtime Filter(运行时拦截)")]),t._v(" "),v("p",[t._v("基本原理:通过在join的probe端提前过滤掉那些不会命中join的输入数据来大幅减少join中的数据传输和计算，从而减少整体的执行时间。")]),t._v(" "),v("h4",{attrs:{id:"rbo小结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rbo小结"}},[t._v("#")]),t._v(" RBO小结")]),t._v(" "),v("ul",[v("li",[t._v("主流RBO实现一般都有几百条基于经验归纳得到的优化规则")]),t._v(" "),v("li",[t._v("优点：实现简单，优化速度快")]),t._v(" "),v("li",[t._v("缺点：不保证得到最优的执行计划("),v("strong",[t._v("基于经验,可能有错误")]),t._v(")\n"),v("ul",[v("li",[t._v("单表扫描:索引扫描(随机I/O)vs全表扫描(顺序I/O)\n"),v("ul",[v("li",[t._v("如果数据分布非常不均衡，"),v("strong",[t._v("索引扫描可能不如全表扫描")])])])]),t._v(" "),v("li",[t._v("Join的实现:Hash Join vs SortMerge Join(无法选择较好的实现)")]),t._v(" "),v("li",[t._v("两表Hash Join:用小表构建哈希表(无法识别小表)")]),t._v(" "),v("li",[t._v("多表Join:\n"),v("ul",[v("li",[t._v("哪种连接顺序是最优的?")]),t._v(" "),v("li",[t._v("是否要对每种组合都探索?\n"),v("ul",[v("li",[t._v("N个表连接,仅仅是left-deep-tree 就有差不多N!种连接顺序")]),t._v(" "),v("li",[t._v("e.g. N=10 --\x3e 总共有3,628,800个连接顺序")])])])])])])])]),t._v(" "),v("h3",{attrs:{id:"cbo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cbo"}},[t._v("#")]),t._v(" CBO")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/07/24/gXQkZcP8mjrqAiU.png",alt:""}})]),t._v(" "),v("h4",{attrs:{id:"概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),v("ul",[v("li",[t._v("使用一个模型估算执行计划的代价，选择代价最小的执行计划\n"),v("ul",[v("li",[t._v("分而治之，执行计划的代价等于所有算子的执行代价之和")]),t._v(" "),v("li",[t._v("通过 RBO 得到（所有）可能的等价执行计划（"),v("strong",[t._v("非原地替换")]),t._v("）")])])]),t._v(" "),v("li",[t._v("算子代价包含 CPU，cache misses，memory，disk I/O，network I/O 等代价\n"),v("ul",[v("li",[t._v("和算子的统计信息有关，比如输入、输出结果的行数，每行大小等")]),t._v(" "),v("li",[t._v("叶子算子 scan：通过统计原始表数据得到\n"),v("ul",[v("li",[t._v("中间算子：根据一定的推导规则，从下层算子的统计信息推导得到")]),t._v(" "),v("li",[t._v("和具体的算子类型，以及算子的物理实现有关（e.g. hash join vs. sort join）")])])])])]),t._v(" "),v("li",[t._v("使用动态规划枚举所有执行计划，选出执行代价最小的执行计划")])]),t._v(" "),v("h4",{attrs:{id:"统计信息"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#统计信息"}},[t._v("#")]),t._v(" 统计信息")]),t._v(" "),v("ul",[v("li",[t._v("基表统计信息\n"),v("ul",[v("li",[t._v("表或者分区级别：行数、行平均大小、表在磁盘中占用了多少字节等")]),t._v(" "),v("li",[t._v("列级别：min、max、num nulls、num、not nulls、num、distinct value(NDV)、histogram 等")])])]),t._v(" "),v("li",[t._v("推导统计信息\n"),v("ul",[v("li",[v("strong",[t._v("选择率（selectivity）")]),t._v(" ：对于某一个过滤条件，查询会从表中返回多大比例的数据")]),t._v(" "),v("li",[v("strong",[t._v("基数（cardinality）")]),t._v(" ：基本含义是表的 unique 行数，在查询计划中常指算子需要处理的行数")])])])]),t._v(" "),v("h5",{attrs:{id:"统计信息收集方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#统计信息收集方式"}},[t._v("#")]),t._v(" 统计信息收集方式")]),t._v(" "),v("ul",[v("li",[t._v("在DDL里指定需要收集的统计信息，数据库会在数据写入时收集或者更新统计信息\n"),v("ul",[v("li",[t._v("缺点:实时导入,影响实时导入的速率")])])]),t._v(" "),v("li",[t._v("手动执行explain analyze statement,触发数据库收集或者更新统计信息\n"),v("ul",[v("li",[t._v("缺点:信息更新不及时(数据插入但是并未手动触发)")])])]),t._v(" "),v("li",[t._v("动态采样\n"),v("ul",[v("li",[t._v("根据部分信息估算表的整个行数信息")])])])]),t._v(" "),v("p",[v("em",[v("strong",[t._v("实际生产中都会用到，各有优缺点")])])]),t._v(" "),v("h5",{attrs:{id:"统计信息推导规则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#统计信息推导规则"}},[t._v("#")]),t._v(" 统计信息推导规则")]),t._v(" "),v("ul",[v("li",[t._v("Filter Selectivity\n"),v("img",{attrs:{src:"https://s2.loli.net/2022/07/24/oHeAhO7ncNqdvWU.png",alt:""}}),t._v("\n假设列和列之间是独立的，列的值是均匀分布")])]),t._v(" "),v("h5",{attrs:{id:"执行计划枚举"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#执行计划枚举"}},[t._v("#")]),t._v(" 执行计划枚举")]),t._v(" "),v("p",[t._v("通常使用"),v("strong",[t._v("贪心算法")]),t._v("或者"),v("strong",[t._v("动态规划")]),t._v("选出最优解")]),t._v(" "),v("h4",{attrs:{id:"小结-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#小结-2"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),v("ul",[v("li",[t._v("CBO使用代价模型和统计信息估算执行计划的代价")]),t._v(" "),v("li",[t._v("CBO使用贪心或者动态规划算法寻找最优执行计划")]),t._v(" "),v("li",[t._v("在大数据场景下CBO对查询性能非常重要")])]),t._v(" "),v("h2",{attrs:{id:"社区开源实践"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#社区开源实践"}},[t._v("#")]),t._v(" 社区开源实践")]),t._v(" "),v("h3",{attrs:{id:"概览"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概览"}},[t._v("#")]),t._v(" 概览")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/07/24/GvuSEDfO4C8B7rb.png",alt:""}})]),t._v(" "),v("h3",{attrs:{id:"apache-calcite"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#apache-calcite"}},[t._v("#")]),t._v(" Apache Calcite")]),t._v(" "),v("ul",[v("li",[t._v("One size fits all:统一的SQL查询引擎")]),t._v(" "),v("li",[t._v("模块化，插件化，稳定可靠")]),t._v(" "),v("li",[t._v("支持异构数据模型\n"),v("ul",[v("li",[t._v("关系型")]),t._v(" "),v("li",[t._v("半结构化")]),t._v(" "),v("li",[t._v("流式")]),t._v(" "),v("li",[t._v("地理空间数据")])])]),t._v(" "),v("li",[t._v("内置RBO和CBO")])]),t._v(" "),v("h4",{attrs:{id:"calcite-rbo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#calcite-rbo"}},[t._v("#")]),t._v(" Calcite RBO")]),t._v(" "),v("ul",[v("li",[t._v("HepPlanner\n"),v("ul",[v("li",[t._v("优化规则(Rule)\n"),v("ul",[v("li",[t._v("Pattern:匹配表达式子树")]),t._v(" "),v("li",[t._v("等价变换：得到新的表达式")])])]),t._v(" "),v("li",[t._v("内置有100+优化规则")]),t._v(" "),v("li",[t._v("四种匹配规则\n"),v("ul",[v("li",[t._v("ARBITRARY/DEPTH_FIRST:深度优先")]),t._v(" "),v("li",[t._v("TOP_DOWN:拓扑顺序")]),t._v(" "),v("li",[t._v("BOTTOM_UP:与TOP DOWN相反")])])]),t._v(" "),v("li",[t._v("遍历所有的rule,直到没有rule可以被触发")]),t._v(" "),v("li",[t._v("优化速度快，实现简单，但是不保证最优")])])])]),t._v(" "),v("h4",{attrs:{id:"calcite-cbo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#calcite-cbo"}},[t._v("#")]),t._v(" Calcite CBO")]),t._v(" "),v("ul",[v("li",[t._v("VolcanoPlanner\n"),v("ul",[v("li",[t._v("基于Volcano/Cascade框架")]),t._v(" "),v("li",[t._v("成本最优假设")]),t._v(" "),v("li",[t._v("Memo: 存储候选执行计划\n-Group: 等价计划集合")]),t._v(" "),v("li",[t._v("Top-down 动态规划搜索")])])])]),t._v(" "),v("h3",{attrs:{id:"小结-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#小结-3"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),v("ul",[v("li",[t._v("主流的查询优化器都包含RBO和CBO")]),t._v(" "),v("li",[t._v("Apache Calcite是大数据领域很流行的查询优化器")]),t._v(" "),v("li",[t._v("Apache Calcite RBO定义了许多优化规则，使用pattern匹配子树，执行等价变换")]),t._v(" "),v("li",[t._v("Apache Calcite CBO基于Volcano/Cascade框架")]),t._v(" "),v("li",[t._v("Volcano/Cascade的精髓：Memo、动态规划、剪枝")])])])}),[],!1,null,null,null);a.default=s.exports}}]);